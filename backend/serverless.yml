org: lvdiev
app: serverless-user-management
service: serverless-user-management

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-plugin-tracing
  - serverless-reqvalidator-plugin

provider:
  name: aws
  runtime: nodejs14.x
  lambdaHashingVersion: '20201221'

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  tracing:
    lambda: true
    apiGateway: true

  environment:
    USER_TABLE: Users-${self:provider.stage}
    USER_CREATED_AT_INDEX: JoinDateIndex
    AVATAR_S3_BUCKET: lvdiev-nd9990-project05-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300

  logs:
    # Enable API Gateway logs
    restApi: true

custom:
  documentation:
    api:
      info:
        version: v1.0.0
        title: User APIs
        description: Yet another user app
    models:
      - name: CreateUserRequest
        contentType: application/json
        schema: ${file(models/create-user-model.json)}
      - name: UpdateUserRequest
        contentType: application/json
        schema: ${file(models/update-user-model.json)}        


functions:

  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  GetUsers:
    handler: src/lambda/http/get-users.handler
    events:
      - http:
          method: get
          path: users
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: !GetAtt UserTable.Arn
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource:
          !Join 
            - ''
            - 
              - !GetAtt UserTable.Arn
              - '/index/'
              - ${self:resources.Resources.UserTable.Properties.LocalSecondaryIndexes.0.IndexName}
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
        Resource: "*"

  CreateUser:
    handler: src/lambda/http/create-user.handler
    events:
      - http:
          method: post
          path: users
          cors: true
          authorizer: Auth
          request:
            schemas:
              application/json: ${file(models/create-user-model.json)}
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Create a new user
            description: Create a new user
            requestModels:
              'application/json': CreateUserRequest
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: !GetAtt UserTable.Arn
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
        Resource: '*'

  UpdateUser:
    handler: src/lambda/http/update-user.handler
    events:
      - http:
          method: patch
          path: users/{userId}
          cors: true
          authorizer: Auth
          request:
            schemas:
              application/json: ${file(models/update-user-model.json)}
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Update a user
            description: Update a user
            requestModels:
              'application/json': UpdateUserRequest
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: !GetAtt UserTable.Arn
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
        Resource: "*"

  DeleteUser:
    handler: src/lambda/http/delete-user.handler
    events:
      - http:
          method: delete
          path: users/{userId}
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: !GetAtt UserTable.Arn
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
        Resource: "*"

  GenerateUploadUrl:
    handler: src/lambda/http/get-upload-url.handler
    events:
      - http:
          method: post
          path: users/{userId}/avatar
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: !GetAtt UserTable.Arn
      - Effect: Allow
        Action:
          - s3:PutObject
          - s3:GetObject
        Resource: !GetAtt AvatarBucket.Arn
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
        Resource: "*"

resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseType: 'DEFAULT_4XX'
        StatusCode: '400'
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,POST,DELETE,PATCH,OPTIONS'"
        RestApiId:
          !Ref ApiGatewayRestApi
    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false
    UserTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.USER_TABLE}
        AttributeDefinitions:
          - AttributeName: tenantId
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
          - AttributeName: joinDate
            AttributeType: S
        KeySchema:
          - AttributeName: tenantId
            KeyType: HASH
          - AttributeName: userId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        LocalSecondaryIndexes:
          - IndexName: ${self:provider.environment.USER_CREATED_AT_INDEX}
            KeySchema:
              - AttributeName: tenantId
                KeyType: HASH
              - AttributeName: joinDate
                KeyType: RANGE
            Projection:
              ProjectionType: ALL

    AvatarBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.AVATAR_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - POST
                - DELETE
                - PUT
                - HEAD

              MaxAge: 3000

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: ND9990Project04BucketPolicy
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Sid: PublicReadForGetBucketObjects
              Principal: '*'
              Action:
                - 's3:GetObject'
                - 's3:PutObject'
              Resource:
                !Join 
                  - ''
                  - 
                    - !GetAtt AvatarBucket.Arn
                    - '/*'
        Bucket: !Ref AvatarBucket